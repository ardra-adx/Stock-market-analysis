{
  "stock_analyzer": "#!/usr/bin/env python3\n\"\"\"\nstock_analyzer.py\n-----------------\nA simple command‑line application that\n\n1. Fetches historical OHLCV data for one or more tickers\n   • Source can be Yahoo Finance (via yfinance) **or**\n     Alpha Vantage (requires FREE API key)\n2. Performs basic technical analysis\n   • 50‑day & 200‑day Moving Averages\n   • Daily returns\n3. Optionally plots the price series + moving averages\n\nUsage examples\n--------------\n# Yahoo Finance (default source)\npython stock_analyzer.py --ticker AAPL --start 2023-01-01 --end 2024-01-01 --plot\n\n# Alpha Vantage (set your API key once:  export AV_API_KEY=YOURKEY)\npython stock_analyzer.py -t MSFT --source alpha --plot\n\nDependencies\n------------\npip install yfinance pandas matplotlib requests python-dateutil\n\"\"\"\nfrom __future__ import annotations\n\nimport argparse\nimport json\nimport os\nfrom datetime import datetime\nfrom typing import List\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport requests\nimport yfinance as yf\n\n\n# ---------- Data‑fetch helpers ------------------------------------------------\ndef fetch_yahoo(ticker: str, start: str, end: str) -> pd.DataFrame:\n    data = yf.download(ticker, start=start, end=end, auto_adjust=False)\n    if data.empty:\n        raise ValueError(f\"No Yahoo Finance data returned for {ticker}\")\n    data.index = pd.to_datetime(data.index)\n    return data\n\n\ndef fetch_alpha_vantage(\n    ticker: str,\n    start: str,\n    end: str,\n    api_key: str,\n    function: str = \"TIME_SERIES_DAILY_ADJUSTED\",\n    outputsize: str = \"full\",\n) -> pd.DataFrame:\n    url = (\n        \"https://www.alphavantage.co/query\"\n        f\"?function={function}&symbol={ticker}&outputsize={outputsize}&apikey={api_key}\"\n    )\n    resp = requests.get(url, timeout=30)\n    resp.raise_for_status()\n    raw = resp.json()\n\n    # JSON always has exactly one key that contains the timeseries\n    key = [k for k in raw.keys() if \"Time Series\" in k]\n    if not key:\n        raise ValueError(f\"Unexpected Alpha Vantage payload: {json.dumps(raw)[:200]}\")\n\n    records = (\n        pd.DataFrame(raw[key[0]])\n        .T.sort_index()\n        .rename(\n            columns={\n                \"1. open\": \"Open\",\n                \"2. high\": \"High\",\n                \"3. low\": \"Low\",\n                \"4. close\": \"Close\",\n                \"5. adjusted close\": \"Adj Close\",\n                \"6. volume\": \"Volume\",\n            }\n        )\n        .astype(float)\n    )\n\n    records.index = pd.to_datetime(records.index)\n    mask = (records.index >= pd.to_datetime(start)) & (records.index <= pd.to_datetime(end))\n    return records.loc[mask]\n\n\n# ---------- Analysis helpers --------------------------------------------------\ndef add_indicators(df: pd.DataFrame, windows: List[int] = (50, 200)) -> pd.DataFrame:\n    out = df.copy()\n    for w in windows:\n        out[f\"MA_{w}\"] = out[\"Adj Close\"].rolling(window=w).mean()\n    out[\"Daily_Return_%\"] = out[\"Adj Close\"].pct_change().mul(100)\n    return out\n\n\n# ---------- Plotting ----------------------------------------------------------\ndef plot_price(df: pd.DataFrame, ticker: str) -> None:\n    plt.figure(figsize=(12, 6))\n    plt.plot(df.index, df[\"Adj Close\"], label=\"Adj Close\")\n    if \"MA_50\" in df.columns:\n        plt.plot(df.index, df[\"MA_50\"], label=\"50‑Day MA\")\n    if \"MA_200\" in df.columns:\n        plt.plot(df.index, df[\"MA_200\"], label=\"200‑Day MA\")\n    plt.title(f\"{ticker} | Price & Moving Averages\")\n    plt.xlabel(\"Date\")\n    plt.ylabel(\"Price (USD)\")\n    plt.legend()\n    plt.grid(True)\n    plt.tight_layout()\n    plt.show()\n\n\n# ---------- CLI ---------------------------------------------------------------\ndef parse_args() -> argparse.Namespace:\n    today = datetime.now().date().isoformat()\n    p = argparse.ArgumentParser(description=\"Fetch and analyze stock data\")\n    p.add_argument(\"-t\", \"--ticker\", required=True, help=\"Ticker symbol, e.g. AAPL\")\n    p.add_argument(\"--start\", default=\"2023-01-01\", help=\"YYYY-MM-DD\")\n    p.add_argument(\"--end\", default=today, help=\"YYYY-MM-DD\")\n    p.add_argument(\n        \"-s\",\n        \"--source\",\n        choices=[\"yahoo\", \"alpha\"],\n        default=\"yahoo\",\n        help=\"Data source (default: yahoo)\",\n    )\n    p.add_argument(\"--no-plot\", action=\"store_true\", help=\"Skip plotting\")\n    return p.parse_args()\n\n\ndef main() -> None:\n    args = parse_args()\n\n    if args.source == \"yahoo\":\n        df = fetch_yahoo(args.ticker, args.start, args.end)\n    else:\n        api_key = os.getenv(\"AV_API_KEY\")\n        if not api_key:\n            raise EnvironmentError(\n                \"Alpha Vantage selected but AV_API_KEY env var not set.\"\n            )\n        df = fetch_alpha_vantage(args.ticker, args.start, args.end, api_key)\n\n    df = add_indicators(df)\n\n    # Print a quick statistical summary to stdout\n    print(\"\\n=== Summary Stats ===\")\n    print(df[[\"Adj Close\", \"Daily_Return_%\"]].describe().round(2))\n\n    # Plot unless user disables\n    if not args.no_plot:\n        plot_price(df, args.ticker)\n\n\nif __name__ == \"__main__\":\n    main()"
}
